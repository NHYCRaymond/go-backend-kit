// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: crawler.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CrawlerNode_Connect_FullMethodName        = "/crawler.CrawlerNode/Connect"
	CrawlerNode_GetMetrics_FullMethodName     = "/crawler.CrawlerNode/GetMetrics"
	CrawlerNode_UpdateConfig_FullMethodName   = "/crawler.CrawlerNode/UpdateConfig"
	CrawlerNode_ExecuteCommand_FullMethodName = "/crawler.CrawlerNode/ExecuteCommand"
)

// CrawlerNodeClient is the client API for CrawlerNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// gRPC服务定义
type CrawlerNodeClient interface {
	// 双向流连接 - 节点与控制中心的主要通信通道
	Connect(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[NodeMessage, ControlMessage], error)
	// 单向调用 - 用于特定操作
	GetMetrics(ctx context.Context, in *GetMetricsRequest, opts ...grpc.CallOption) (*MetricsResponse, error)
	UpdateConfig(ctx context.Context, in *ConfigUpdateRequest, opts ...grpc.CallOption) (*ConfigUpdateResponse, error)
	ExecuteCommand(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandResponse, error)
}

type crawlerNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewCrawlerNodeClient(cc grpc.ClientConnInterface) CrawlerNodeClient {
	return &crawlerNodeClient{cc}
}

func (c *crawlerNodeClient) Connect(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[NodeMessage, ControlMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CrawlerNode_ServiceDesc.Streams[0], CrawlerNode_Connect_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[NodeMessage, ControlMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CrawlerNode_ConnectClient = grpc.BidiStreamingClient[NodeMessage, ControlMessage]

func (c *crawlerNodeClient) GetMetrics(ctx context.Context, in *GetMetricsRequest, opts ...grpc.CallOption) (*MetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MetricsResponse)
	err := c.cc.Invoke(ctx, CrawlerNode_GetMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crawlerNodeClient) UpdateConfig(ctx context.Context, in *ConfigUpdateRequest, opts ...grpc.CallOption) (*ConfigUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfigUpdateResponse)
	err := c.cc.Invoke(ctx, CrawlerNode_UpdateConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crawlerNodeClient) ExecuteCommand(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommandResponse)
	err := c.cc.Invoke(ctx, CrawlerNode_ExecuteCommand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CrawlerNodeServer is the server API for CrawlerNode service.
// All implementations must embed UnimplementedCrawlerNodeServer
// for forward compatibility.
//
// gRPC服务定义
type CrawlerNodeServer interface {
	// 双向流连接 - 节点与控制中心的主要通信通道
	Connect(grpc.BidiStreamingServer[NodeMessage, ControlMessage]) error
	// 单向调用 - 用于特定操作
	GetMetrics(context.Context, *GetMetricsRequest) (*MetricsResponse, error)
	UpdateConfig(context.Context, *ConfigUpdateRequest) (*ConfigUpdateResponse, error)
	ExecuteCommand(context.Context, *CommandRequest) (*CommandResponse, error)
	mustEmbedUnimplementedCrawlerNodeServer()
}

// UnimplementedCrawlerNodeServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCrawlerNodeServer struct{}

func (UnimplementedCrawlerNodeServer) Connect(grpc.BidiStreamingServer[NodeMessage, ControlMessage]) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedCrawlerNodeServer) GetMetrics(context.Context, *GetMetricsRequest) (*MetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetrics not implemented")
}
func (UnimplementedCrawlerNodeServer) UpdateConfig(context.Context, *ConfigUpdateRequest) (*ConfigUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfig not implemented")
}
func (UnimplementedCrawlerNodeServer) ExecuteCommand(context.Context, *CommandRequest) (*CommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteCommand not implemented")
}
func (UnimplementedCrawlerNodeServer) mustEmbedUnimplementedCrawlerNodeServer() {}
func (UnimplementedCrawlerNodeServer) testEmbeddedByValue()                     {}

// UnsafeCrawlerNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CrawlerNodeServer will
// result in compilation errors.
type UnsafeCrawlerNodeServer interface {
	mustEmbedUnimplementedCrawlerNodeServer()
}

func RegisterCrawlerNodeServer(s grpc.ServiceRegistrar, srv CrawlerNodeServer) {
	// If the following call pancis, it indicates UnimplementedCrawlerNodeServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CrawlerNode_ServiceDesc, srv)
}

func _CrawlerNode_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CrawlerNodeServer).Connect(&grpc.GenericServerStream[NodeMessage, ControlMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CrawlerNode_ConnectServer = grpc.BidiStreamingServer[NodeMessage, ControlMessage]

func _CrawlerNode_GetMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrawlerNodeServer).GetMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CrawlerNode_GetMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrawlerNodeServer).GetMetrics(ctx, req.(*GetMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrawlerNode_UpdateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrawlerNodeServer).UpdateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CrawlerNode_UpdateConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrawlerNodeServer).UpdateConfig(ctx, req.(*ConfigUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrawlerNode_ExecuteCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrawlerNodeServer).ExecuteCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CrawlerNode_ExecuteCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrawlerNodeServer).ExecuteCommand(ctx, req.(*CommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CrawlerNode_ServiceDesc is the grpc.ServiceDesc for CrawlerNode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CrawlerNode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "crawler.CrawlerNode",
	HandlerType: (*CrawlerNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMetrics",
			Handler:    _CrawlerNode_GetMetrics_Handler,
		},
		{
			MethodName: "UpdateConfig",
			Handler:    _CrawlerNode_UpdateConfig_Handler,
		},
		{
			MethodName: "ExecuteCommand",
			Handler:    _CrawlerNode_ExecuteCommand_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _CrawlerNode_Connect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "crawler.proto",
}
